filter drop-shadow same image repeat as shadow
box-shadow: 5px 10px 100px red
as shadow of objext
box-shadow: 5px 100px 100px #888888;
  filter: drop-shadow(30px 20px 2px #4444dd); first and second orientation and third blur
  transform: skew(2,4);
  skew best for 3d 
  z-index
  css invert()


          /*#svg{
            background-color: blue;
            fill: red;
            margin-top: 0;
            /*transform: rotateX(180deg);
            position: fixed;
            top: 0;
            background-repeat: no-repeat;
            width: 80vw;
            min-height: 100px;
            background-size: 100% 100px;
            z-index: 99999999999;
            animation: x 1s linear infinite;
        }*/

        /*:root{
            --color_red: red;
        }
        *{
            background-image: linear-gradient(45deg,red,blue,transparent);
            box-sizing: border-box;
        }
        /*body {
            background-image: repeating-linear-gradient(120deg, #212529, #1b1f22);
            background-color: #212529;
            background-image: linear-gradient(120deg, blue,red);
            background-image: linear-gradient(120deg, blue,red);
        }*/
        /*#main1{
            height: 100%;
            width: 100%;
            background-image: linear-gradient(120deg, blue,red);
            /*background-color: #1b1f22;
            position: fixed;
            display: flex;
            flex-wrap: wrap;
            background-size: cover;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            overflow-x: hidden;
            animation: bg 2s ease-in-out infinite;
            border-style: none;
        }
        @keyframes bg {
            0%{
                filter: blur(50px);
                background-image: linear-gradient(120deg, blue, var(--color_red));
            }
            25%{
                filter: blur(75px);
                background-image: linear-gradient(117deg, blue,red);
            }
            50%{
                border-radius: 50%;
                transform: matrix(0.866,0.7,-0.8,0.866,0,0) scale(2,3);
                filter: blur(100px) contrast(70%);
                background-image: linear-gradient(112deg, blue,red);
            }
            75%{
                filter: blur(75px);
                background-image: linear-gradient(117deg, blue,red);
            }
            100%{
                filter: blur(50px);
                background-image: linear-gradient(120deg, blue,red);
            }
        }*/

         svg:nth-child(2) {
            display: none;
        }



smooth animation use forwards

transform-origin: center;
            transform-box: fill-box;
            best effect of rotation at own axis
            
js domcontentloaded best method to show loader and  fetch data

const postID = '943659869113432918';
        const blogID = '9160331485130872315';
        const apiKey = 'AIzaSyDZhYG2aZx-9XbFzJHi0H6Xjqn2Ntvbbqo';



    <!-- <script>

        document.addEventListener("DOMContentLoaded", function () {
            let isDragging = false;
            let startY = 0;
            let scrollTop = 0;
            let Cst = document.createElement('div');
            Cst.setAttribute('class', 'custom-scrollbar-track');
            document.body.appendChild(Cst);

            let Csb = document.createElement('div');
            Csb.setAttribute('class', 'custom-scrollbar');
            Cst.appendChild(Csb);

            const scrollbar = document.querySelector('.custom-scrollbar-track');
            const scrollThumb = document.querySelector('.custom-scrollbar');

            function setScrollThumbHeight() {
                const contentHeight = document.documentElement.scrollHeight;
                const viewportHeight = window.innerHeight;
                const scrollbarHeight = scrollbar.offsetHeight;
                const scrollThumbHeight = Math.max((viewportHeight / contentHeight) * scrollbarHeight, 30);
                scrollThumb.style.height = `${scrollThumbHeight}px`;
            }

            scrollbar.addEventListener('mousedown', function (event) {
                const clickPosition = event.clientY - scrollbar.getBoundingClientRect().top;
                const thumbHeight = scrollThumb.getBoundingClientRect().height;
                const trackHeight = scrollbar.getBoundingClientRect().height;
                const thumbPosition = clickPosition - (thumbHeight / 2);
                const maxThumbTop = trackHeight - thumbHeight;
                const newThumbTop = Math.min(Math.max(thumbPosition, 0), maxThumbTop);
                scrollThumb.style.transition = 'all 1 ease-in';
                scrollThumb.style.top = `${newThumbTop}px`;
            
                const scrollPercent = newThumbTop / maxThumbTop;
                const contentHeight = document.documentElement.scrollHeight;
                const totalScrollHeight = contentHeight - window.innerHeight;
                const scrollPosition = totalScrollHeight * scrollPercent;
            
                window.scrollTo({
                    top: scrollPosition,
                    left: 0,
                });
            });

            scrollThumb.addEventListener('mousedown', function (e) {
                document.body.style.cursor = 'grab';
                isDragging = true;
                startY = e.clientY - scrollThumb.offsetTop;
                scrollTop = scrollbar.scrollTop;
                e.preventDefault();
            });

            document.addEventListener('mousemove', function (e) {
                if (isDragging) {
                    let newTop = e.clientY - startY;
                    newTop = Math.max(newTop, 0);
                    newTop = Math.min(newTop, scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    scrollThumb.style.top = `${newTop}px`;
                    const scrollPercent = newTop / (scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    const contentHeight = document.documentElement.scrollHeight;
                    const totalScrollHeight = contentHeight - window.innerHeight;
                    const ScrollPosition = totalScrollHeight * scrollPercent;
                    window.scrollTo({
                        top: ScrollPosition,
                        left: 0,
                    });
                    e.preventDefault();
                }
            });

            window.addEventListener('scroll', (e) => {
                const pxToVh = (scrollThumb.offsetHeight / window.innerHeight) * 100;
                const totalHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const initialThumbTop = (parseInt(scrollThumb.style.top) + scrollThumb.offsetHeight) / window.innerHeight * 100 - pxToVh;
                scrollThumb.style.top = `${initialThumbTop}vh`;
                const hgA = (scrollbar.offsetHeight / window.innerHeight) * 100 - pxToVh;
                scrollThumb.style.top = `${(window.scrollY / totalHeight) * hgA}vh`;
                e.preventDefault();
            });
            
                if (document.documentElement.scrollHeight > window.innerHeight) {
                    document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'block';
                } else {
                    document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'none';
                }
                function checkScrollbarVisibility() {
                    const contentHeight = document.documentElement.scrollHeight;
                    const windowHeight = window.innerHeight;
                    const isScrollable = contentHeight > windowHeight;
                    if (isScrollable) {
                        scrollThumb.style.display = 'block';
                        scrollbar.style.display = 'block';
                    } else {
                        scrollThumb.style.display = 'none';
                        scrollbar.style.display = 'none';
                    }
                }



                checkScrollbarVisibility();

                window.addEventListener('resize', checkScrollbarVisibility);

                setScrollThumbHeight();


            window.addEventListener('resize', function () {
                setScrollThumbHeight();
                e.preventDefault();
            });

            document.addEventListener('mouseup', function (e) {
                document.body.style.cursor = 'auto';
                isDragging = false;
                e.preventDefault();
            });
        });

    </script> -->

        <!-- <script>
        checkScrollbarVisibility();
        document.addEventListener("DOMContentLoaded", function () {
            let isDragging = false;
            let startY = 0;
            let scrollTop = 0;
            let Cst = document.createElement('div');
            Cst.setAttribute('class', 'custom-scrollbar-track');
            document.body.appendChild(Cst);

            let Csb = document.createElement('div');
            Csb.setAttribute('class', 'custom-scrollbar');
            Cst.appendChild(Csb);

            const scrollbar = document.querySelector('.custom-scrollbar-track');
            const scrollThumb = document.querySelector('.custom-scrollbar');

            function setScrollThumbHeight() {
                const contentHeight = document.documentElement.scrollHeight;
                const viewportHeight = window.innerHeight;
                const scrollbarHeight = scrollbar.offsetHeight;
                const scrollThumbHeight = Math.max((viewportHeight / contentHeight) * scrollbarHeight, 30);
                scrollThumb.style.height = `${scrollThumbHeight}px`;
            }

            scrollbar.addEventListener('mousedown', function (event) {
                const clickPosition = event.clientY - scrollbar.getBoundingClientRect().top;
                const thumbHeight = scrollThumb.getBoundingClientRect().height;
                const trackHeight = scrollbar.getBoundingClientRect().height;
                const thumbPosition = clickPosition - (thumbHeight / 2);
                const maxThumbTop = trackHeight - thumbHeight;
                const newThumbTop = Math.min(Math.max(thumbPosition, 0), maxThumbTop);
                scrollThumb.style.top = `${newThumbTop}px`;

                const scrollPercent = newThumbTop / maxThumbTop;
                const contentHeight = document.documentElement.scrollHeight;
                const totalScrollHeight = contentHeight - window.innerHeight;
                const scrollPosition = totalScrollHeight * scrollPercent;

                window.scrollTo({
                    top: scrollPosition,
                    left: 0,
                });
            });

            scrollThumb.addEventListener('mousedown', function (e) {
                document.body.style.cursor = 'grab';
                isDragging = true;
                startY = e.clientY - scrollThumb.offsetTop;
                scrollTop = scrollbar.scrollTop;
                e.preventDefault();
            });

            document.addEventListener('mousemove', function (e) {
                if (isDragging) {
                    let newTop = e.clientY - startY;
                    newTop = Math.max(newTop, 0);
                    newTop = Math.min(newTop, scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    scrollThumb.style.top = `${newTop}px`;
                    const scrollPercent = newTop / (scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    const contentHeight = document.documentElement.scrollHeight;
                    const totalScrollHeight = contentHeight - window.innerHeight;
                    const ScrollPosition = totalScrollHeight * scrollPercent;
                    window.scrollTo({
                        top: ScrollPosition,
                        left: 0,
                    });
                    e.preventDefault();
                }
            });

            window.addEventListener('scroll', (e) => {
                const pxToVh = (scrollThumb.offsetHeight / window.innerHeight) * 100;
                const totalHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const initialThumbTop = (parseInt(scrollThumb.style.top) + scrollThumb.offsetHeight) / window.innerHeight * 100 - pxToVh;
                scrollThumb.style.top = `${initialThumbTop}vh`;
                const hgA = (scrollbar.offsetHeight / window.innerHeight) * 100 - pxToVh;
                scrollThumb.style.top = `${(window.scrollY / totalHeight) * hgA}vh`;
                e.preventDefault();
            });

            if (document.documentElement.scrollHeight > window.innerHeight) {
                document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'block';
            } else {
                document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'none';
            }
            function checkScrollbarVisibility() {
                const contentHeight = document.documentElement.scrollHeight;
                const windowHeight = window.innerHeight;
                const isScrollable = contentHeight > windowHeight;
                if (isScrollable) {
                    scrollThumb.style.display = 'block';
                    scrollbar.style.display = 'block';
                } else {
                    scrollThumb.style.display = 'none';
                    scrollbar.style.display = 'none';
                }
            }



            checkScrollbarVisibility();

            window.addEventListener('resize', checkScrollbarVisibility);

            setScrollThumbHeight();


            window.addEventListener('resize', function () {
                setScrollThumbHeight();
                e.preventDefault();
            });

            document.addEventListener('mouseup', function (e) {
                document.body.style.cursor = 'auto';
                isDragging = false;
                e.preventDefault();
            });
        });

    </script> -->


document.addEventListener("DOMContentLoaded", function () {
            let isDragging = false;
            let startY = 0;
            let scrollTop = 0;
            let Cst = document.createElement('div');
            Cst.setAttribute('class', 'custom-scrollbar-track');
            document.body.appendChild(Cst);

            let Csb = document.createElement('div');
            Csb.setAttribute('class', 'custom-scrollbar');
            Cst.appendChild(Csb);

            const scrollbar = document.querySelector('.custom-scrollbar-track');
            const scrollThumb = document.querySelector('.custom-scrollbar');

            function setScrollThumbHeight() {
                const contentHeight = document.documentElement.scrollHeight;
                const viewportHeight = window.innerHeight;
                const scrollbarHeight = scrollbar.offsetHeight;
                const scrollThumbHeight = Math.max((viewportHeight / contentHeight) * scrollbarHeight, 30);
                scrollThumb.style.height = `${scrollThumbHeight}px`;
            }



            scrollbar.addEventListener('mousedown', function (event) {
                const clickPosition = event.clientY - scrollbar.getBoundingClientRect().top;
                const thumbHeight = scrollThumb.getBoundingClientRect().height;
                const trackHeight = scrollbar.getBoundingClientRect().height;
                const thumbPosition = clickPosition - (thumbHeight / 2);
                const maxThumbTop = trackHeight - thumbHeight;
                const newThumbTop = Math.min(Math.max(thumbPosition, 0), maxThumbTop);
                scrollThumb.style.top = `${newThumbTop}px`;

                const scrollPercent = newThumbTop / maxThumbTop;
                const contentHeight = document.documentElement.scrollHeight;
                const totalScrollHeight = contentHeight - window.innerHeight;
                const scrollPosition = totalScrollHeight * scrollPercent;

                window.scrollTo({
                    top: scrollPosition,
                    left: 0,
                });
            });

            scrollThumb.addEventListener('mousedown', function (e) {
                document.body.style.cursor = 'grab';
                isDragging = true;
                startY = e.clientY - scrollThumb.offsetTop;
                scrollTop = scrollbar.scrollTop;
                e.preventDefault();
            });

            document.addEventListener('mousemove', function (e) {
                if (isDragging) {
                    let newTop = e.clientY - startY;
                    newTop = Math.max(newTop, 0);
                    newTop = Math.min(newTop, scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    scrollThumb.style.top = `${newTop}px`;
                    const scrollPercent = newTop / (scrollbar.offsetHeight - scrollThumb.offsetHeight);
                    const contentHeight = document.documentElement.scrollHeight;
                    const totalScrollHeight = contentHeight - window.innerHeight;
                    const ScrollPosition = totalScrollHeight * scrollPercent;
                    window.scrollTo({
                        top: ScrollPosition,
                        left: 0,
                    });
                    e.preventDefault();
                }
            });

            window.addEventListener('scroll', (e) => {
                const pxToVh = (scrollThumb.offsetHeight / window.innerHeight) * 100;
                const totalHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const initialThumbTop = (parseInt(scrollThumb.style.top) + scrollThumb.offsetHeight) / window.innerHeight * 100 - pxToVh;
                scrollThumb.style.top = `${initialThumbTop}vh`;
                const hgA = (scrollbar.offsetHeight / window.innerHeight) * 100 - pxToVh;
                scrollThumb.style.top = `${(window.scrollY / totalHeight) * hgA}vh`;
                e.preventDefault();
            });

            if (document.documentElement.scrollHeight > window.innerHeight) {
                document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'block';
            } else {
                document.querySelector('.custom-scrollbar-track,.custom-scrollbar-track').style.display = 'none';
            }
            function checkScrollbarVisibility() {
                const contentHeight = document.documentElement.scrollHeight;
                const windowHeight = window.innerHeight;
                const isScrollable = contentHeight > windowHeight;
                if (isScrollable) {
                    scrollThumb.style.display = 'block';
                    scrollbar.style.display = 'block';
                } else {
                    scrollThumb.style.display = 'none';
                    scrollbar.style.display = 'none';
                }
            }



            checkScrollbarVisibility();

            window.addEventListener('resize', checkScrollbarVisibility);

            setScrollThumbHeight();


            window.addEventListener('resize', function (e) {
                setScrollThumbHeight();
                e.preventDefault();
            });

            document.addEventListener('mouseup', function (e) {
                document.body.style.cursor = 'auto';
                isDragging = false;
                e.preventDefault();
            });
            if (window.location.href == 'https://scienhac.blogspot.com/?m=1' || window.location.href == 'https://scienhac.blogspot.com/') {
                let mainbtn1 = document.querySelector('.mainbtn');
                mainbtn1.addEventListener('click', () => {
                    if (checkScrollbarVisibility) {
                        setScrollThumbHeight();
                        scrollThumb.style.display = 'block';
                        scrollbar.style.display = 'block';
                        var contentHeight = document.documentElement.scrollHeight;
                        var viewportHeight = window.innerHeight;
                        var scrollbarHeight = scrollbar.offsetHeight;
                        var scrollThumbHeight = Math.max((viewportHeight / contentHeight) * scrollbarHeight, 30);
                        scrollThumb.style.height = `${scrollThumbHeight}px`;
                        setScrollThumbHeight();
                    } else {
                        scrollThumb.style.display = 'none';
                        scrollbar.style.display = 'none';
                    }
                });
            }